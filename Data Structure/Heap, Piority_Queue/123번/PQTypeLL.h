/* 3번 D. 연결리스트    Enqueue : O(N)    Dequeue : O(1) <- SortedList가 내림차순으로 정리되어있으므로 O(1)이다. 힙    Enqueue : O(log2 N)    Dequeue : O(log2 N)  */// Definition of class PQType, which represents the Priority Queue ADTclass FullPQ{};class EmptyPQ{};#pragma once#include "SortedType.h"template<class ItemType>class PQType{public:  PQType(int);          // parameterized class constructor  ~PQType();            // class destructor    void MakeEmpty();  // Function: Initializes the queue to an empty state.  // Post: Queue is empty.    bool IsEmpty() const;  // Function: Determines whether the queue is empty.  // Post: Function value = (queue is empty)    bool IsFull() const;  // Function: Determines whether the queue is full.  // Post: Function value = (queue is full)    void Enqueue(ItemType newItem);  // Function: Adds newItem to the rear of the queue.  // Post: if (the priority queue is full) exception FullPQ is thrown;  //       else newItem is in the queue.    void Dequeue(ItemType& item);  // Function: Removes element with highest priority from the queue  // and returns it in item.  // Post: If (the priority queue is empty) exception EmptyPQ is thrown;  //       else highest priority element has been removed from queue.  //       item is a copy of removed element.private:  int length;  SortedType<ItemType> items;};template<class ItemType>PQType<ItemType>::PQType(int max){  length = 0;}template<class ItemType>void PQType<ItemType>::MakeEmpty(){    items.MakeEmpty();    length = 0;}template<class ItemType>PQType<ItemType>::~PQType(){}template<class ItemType>void PQType<ItemType>::Dequeue(ItemType& item)// Post: element with highest priority has been removed //       from the queue; a copy is returned in item.{  if (length == 0)    throw EmptyPQ();  else  {      items.ResetList();      items.GetNextItem(item);      items.DeleteItem(item);      length--;  }}template<class ItemType>void PQType<ItemType>::Enqueue(ItemType newItem)// Post: newItem is in the queue.{  if (items.IsFull())    throw FullPQ();  else  {      length++;      items.InsertItem(newItem);  }}template<class ItemType>bool PQType<ItemType>::IsFull() const// Post: Returns true if the queue is full; false, otherwise.{    return items.IsFull();}template<class ItemType>bool PQType<ItemType>::IsEmpty() const// Post: Returns true if the queue is empty; false, otherwise.{  return length == 0;}