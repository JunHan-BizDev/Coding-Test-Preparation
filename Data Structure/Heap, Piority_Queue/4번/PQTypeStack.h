// Definition of class PQType, which represents the Priority Queue ADTclass FullPQ{};class EmptyPQ{};#include "Heap.h"template<class ItemType>class PQType{public:  PQType();          // parameterized class constructor  PQType(int);          // parameterized class constructor  ~PQType();            // class destructor    void MakeEmpty();  // Function: Initializes the queue to an empty state.  // Post: Queue is empty.    bool IsEmpty() const;  // Function: Determines whether the queue is empty.  // Post: Function value = (queue is empty)    bool IsFull() const;  // Function: Determines whether the queue is full.  // Post: Function value = (queue is full)    void Push(ItemType newItem);  // Function: Adds newItem to the rear of the queue.  // Post: if (the priority queue is full) exception FullPQ is thrown;  //       else newItem is in the queue.    void Pop(ItemType& item);    ItemType Top();    private:  int length;  HeapType<ItemType> items;  int maxItems;    int StampCount;};template<class ItemType>PQType<ItemType>::PQType(){    maxItems = 500;    items.elements = new ItemType[500];    for(int i = 0; i < 500; i++)    {        items.elements[i] = NULL;    }    items.timestamp = new int[500];    for(int i = 0; i < 500; i++)    {        items.timestamp[i] = NULL;    }    length = 0;    StampCount = -1;}template<class ItemType>PQType<ItemType>::PQType(int max){  maxItems = max;  items.elements = new ItemType[max];    for(int i = 0; i < max; i++)    {        items.elements[i] = NULL;    }  items.timestamp = new int[max];    for(int i = 0; i < max; i++)    {        items.timestamp[i] = NULL;    }  length = 0;    StampCount = -1;}template<class ItemType>void PQType<ItemType>::MakeEmpty(){  length = 0;}template<class ItemType>PQType<ItemType>::~PQType(){  delete [] items.elements;}template<class ItemType>void PQType<ItemType>::Pop(ItemType& item)// Post: element with highest priority has been removed //       from the queue; a copy is returned in item.{  if (length == 0)    throw EmptyPQ();  else  {      int i;      i = items.getBiggestTimeStampIndex();          item = items.elements[i];    items.elements[i] = items.elements[length-1];    length--;    items.ReheapDown(i, length-1);  }}template<class ItemType>void PQType<ItemType>::Push(ItemType newItem)// Post: newItem is in the queue.{  if (length == maxItems)    throw FullPQ();  else  {      int i;    length++;    StampCount++;    items.elements[length-1] = newItem;    items.ReheapUp(0, length-1);      i = items.FindIndex(newItem);      items.timestamp[i] = StampCount;  }}template<class ItemType>bool PQType<ItemType>::IsFull() const// Post: Returns true if the queue is full; false, otherwise.{  return length == maxItems;}template<class ItemType>bool PQType<ItemType>::IsEmpty() const// Post: Returns true if the queue is empty; false, otherwise.{  return length == 0;}template<class ItemType>ItemType PQType<ItemType>::Top(){    int i = items.getBiggestTimeStampIndex();        return items.elements[i];}